const authService = require('../services/auth.service');
const { validationResult } = require('express-validator'); // Using express-validator for more robust validation (optional)

// Basic email validation regex (consider a more robust library for production)
const isValidEmail = (email) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);

class AuthController {
  async registerUser(req, res, next) {
    try {
      const { name, email, password, roles } = req.body;

      // Input Validation
      if (!name || !email || !password) {
        return res.status(400).json({ message: 'Name, email, and password are required.' });
      }
      if (typeof name !== 'string' || name.trim() === '') {
        return res.status(400).json({ message: 'Name must be a non-empty string.' });
      }
      if (!isValidEmail(email)) {
        return res.status(400).json({ message: 'Invalid email format.' });
      }
      if (typeof password !== 'string' || password.length < 6) {
        return res.status(400).json({ message: 'Password must be at least 6 characters long.' });
      }
      if (roles && (!Array.isArray(roles) || !roles.every(role => typeof role === 'string'))) {
        return res.status(400).json({ message: 'Roles must be an array of strings.' });
      }


      const userData = { name, email, password, roles };
      const user = await authService.register(userData);
      
      // Send back user info and token (token is generated by authService.login which is called by authService.register)
      res.status(201).json(user);
    } catch (error) {
      if (error.message.includes('already exists')) { // Check for duplicate email error
        return res.status(409).json({ message: error.message });
      }
      next(error);
    }
  }

  async loginUser(req, res, next) {
    try {
      const { email, password } = req.body;

      // Input Validation
      if (!email || !password) {
        return res.status(400).json({ message: 'Email and password are required.' });
      }
      if (!isValidEmail(email)) {
        return res.status(400).json({ message: 'Invalid email format.' });
      }

      const result = await authService.login({ email, password });
      res.status(200).json(result);
    } catch (error) {
      if (error.message === 'Invalid credentials' || error.message === 'User not found') {
        return res.status(401).json({ message: error.message });
      }
      next(error);
    }
  }

  async getCurrentUser(req, res, next) {
    try {
      // req.user is set by the 'protect' middleware
      if (!req.user) {
        return res.status(401).json({ message: 'Not authorized, user data not found.' });
      }
      // The authService might have a method to fetch fresh user data if needed,
      // but for now, we return what the middleware attached.
      // To ensure we don't send back sensitive info that might have been accidentally put on req.user:
      const { id, name, email, roles } = req.user;
      res.status(200).json({ id, name, email, roles });
    } catch (error) {
      next(error);
    }
  }
}

module.exports = new AuthController();
